[tool.poetry]
name = "iStarAutoModeling"
version = "0.1.0"
description = "A pipeline to extract requirements from documents and generate iStar models."
authors = ["FrozenYogurtPuff <frozenyogurtpuff@gmail.com>"]
license = "MIT"

[tool.poetry.dependencies]
python = "3.10.2"
numpy = "^1.22.3"
tqdm = "^4.62.3"
transformers = "^4.16.2"
tensorboardX = "^2.4.1"
seqeval = "^1.2.2"
spacy = "^3.5.1"
torch = "^1.11.0"
spacy-alignments = "^0.8.4"
benepar = "^0.2.0"
Flask = "^2.1.2"
Flask-Cors = "^3.0.10"
pandas = "^1.4.3"
boto3 = "^1.24.20"
matplotlib = "^3.5.2"
colorlog = "^6.6.0"
sacred = "^0.8.4"
pymongo = "^4.3.3"

[tool.poetry.dev-dependencies]
pytest = "^7.0.1"
logging_tree = "^1.9"
isort = "^5.10.1"
mypy = "^0.941"
black = "^22.1.0"
pycln = "^1.2.4"
pre-commit = "^2.17.0"
python-docx = "^0.8.11"

[tool.mypy]
python_version = "3.10"
warn_no_return = true
warn_return_any = true
warn_redundant_casts = true
show_error_codes = true
check_untyped_defs = true
strict_optional = true
ignore_missing_imports = true
files = [
    "./*.py",
    "src/**/*.py",
    "test/**/*.py",
    "data_process/**/*.py"
]

[[tool.mypy.overrides]]
module = "transformers.*"
follow_imports = "skip"

[[tool.mypy.overrides]]
module = [
    "src.deeplearning.entity.infer.base",
    "src.deeplearning.entity.utils.*",
    "src.deeplearning.entity.models.*",
    "src.deeplearning.relation.*"
]
follow_imports = "skip"
ignore_errors = true

[tool.black]
target-version = ['py310']
line-length = 79
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.mypy_cache
    | \.pytest_cache
    | \.ipynb_checkpoints
    | \.venv
    | pretrained_data
    | pretrained_model
    | temp
  )/
)
'''

[tool.pytest]
addopts = "-v -s"

[tool.isort]
profile = "black"
line_length = 79
py_version = 310

[tool.pytest.ini_options]
log_cli = 1
log_cli_level = "CRITICAL"
log_cli_format = "%(asctime)s [%(levelname)8s] (%(name)s:%(lineno)s) - %(message)s"
log_cli_date_format= "%Y-%m-%d %H:%M:%S"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
